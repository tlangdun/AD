package aw1;

 
import java.io.*; 
import java.util.*; 
import java.util.LinkedList; 

class Main {

    static int v; 
    static int path[];
    
    public static void main(String[] args) {
        int t = In.readInt();
        for (int i = 0; i < t; i++) {
            testCase();
        }
    }

   public static void testCase() {
        int v = In.readInt();
        int e = In.readInt();
        
        int adj[][] = new int[v][v];
        
        for (int i = 0; i < e; i++) {
          int a = In.readInt();
          int b = In.readInt();
          adj[a][b] = 1;
          adj[b][a] = 1;
          }
        
        hamCycle(adj);
   }
   
   
    /* This function solves the Hamiltonian Cycle problem using 
       Backtracking. It mainly uses hamCycleUtil() to solve the 
       problem. It returns false if there is no Hamiltonian Cycle 
       possible, otherwise return true and prints the path. 
       Please note that there may be more than one solutions, 
       this function prints one of the feasible solutions. */
   
   public static int hamCycle (int adj[][]) {
        path = new int [v];
        for (int i = 0; i < v; i++) {
        path[i] = -1;
        }
        
        path[0] = 0;
        
        if (hamCycleUtil(adj, path, 1)) {
        return 0;
        }
        for (int i = 0; i < path.length; i++) {
        	Out.println(path[i] + " ");
        }
        
        return 1;
   }
   
   public static boolean hamCycleUtil(int adj[][], int path[], int pos) {
   
        /* base case: If all vertices are included in 
           Hamiltonian Cycle */
        if (pos == v) {
        
           // And if there is an edge from the last included 
            // vertex to the first vertex 
            
            if (adj[path[pos-1]][path[0]] == 1){
              return true;
              
            }
            else
              return false;
            }
            
        // Try different vertices as a next candidate in 
        // Hamiltonian Cycle. We don't try for 0 as we 
        // included 0 as starting point in in hamCycle() 
        
         for (int vert = 0; vert < v; vert++) {
                /* Check if this vertex can be added to Hamiltonian 
               Cycle */
               if (isSafe(vert, adj, pos)) {
                 path[pos] = vert;
                 
                 /* recur to construct rest of the path */
                 
                 if (hamCycleUtil(adj, path, pos+1) == true) {
                    return true;
                 }
                 
                 /* If adding vertex v doesn't lead to a solution, 
                   then remove it */
                   
                 path[pos] = -1; 
               }
          }
            /* If no vertex can be added to Hamiltonian Cycle 
            constructed so far, then return false */
            
          return false; 
     }
     
      /* A utility function to check if the vertex v can be 
       added at index 'pos'in the Hamiltonian Cycle 
       constructed so far (stored in 'path[]') */
       
     public static boolean isSafe(int vert, int adj[][], int pos) {
         /* Check if this vertex is an adjacent vertex of 
           the previously added vertex. */
         
         if (adj[path[pos - 1]][vert] == 0)
            return false;
            
          /* Check if the vertex has already been included. 
           This step can be optimized by creating an array 
           of size V */
         for (int i = 0; i < pos; i++) {
            if (path[i] == v)
              return false;
         }
         return true;
     }
 }
