import java.io.*; 
import java.util.*; 
import java.util.LinkedList; 
  
public class Main {

    public static void main(String[] args) {
    	int t = In.readInt();
        for (int i = 0; i <= t; i++) {
            testCase();
            
        }
        
        
    }
    
    public static void testCase() {
        // Input using In.java class
        int n = In.readInt();
        int m = In.readInt();
        
    	LinkedList<Integer> adj[]; 
    	int time = 0;
    	
        adj = new LinkedList[n];
         
        
        
        for(int i = 0; i < n ; i++){ 
            adj[i] = new LinkedList<>();
            }
        int a;
        int b;
        
        for (int i = 0; i < m ; i++){
        	a = In.readInt();
        	b = In.readInt();
        	adj[a].add(b);
        	adj[b].add(a);
        }
        int disc[] = new int[n];
        boolean vis[] = new boolean[n]; 
        int parent[] = new int[n]; 
        int low[] = new int[n]; 
        
        boolean AP[] = new boolean[n]; 

        for (int j = 0; j < n; j++) 
        { 
            parent[j] = -1; 
            vis[j] = false; 
            AP[j] = false; 
        } 
        
        for (int j = 0; j < n; j++) {
            if (vis[j] == false) 
                dfs(adj, j, vis, disc, low, parent, AP, time); 
        }
        int counter = 0;
        for (int i = 0; i < n; i++) {
            if (AP[i] == true) {
            	counter++;
                Out.print(i+" "); }
    } 
        if (counter == 0) {
        	Out.print(-1);
        }
        Out.println();
        // Output using Out.java class
    }
       
    

    public static void dfs(LinkedList<Integer> adj[], int u, boolean vis[], int disc[], 
            int low[], int parent[], boolean AP[], int time) 
    {
    	 
    	 
    	 disc[u] = low[u] = ++time; 
    	 int child = 0;
    	 vis[u] = true;
    	 
    	 Iterator<Integer> i = adj[u].iterator(); 
         while (i.hasNext()) 
         { 
             int v = i.next();
             if (!vis[v]) 
             { 
                 parent[v] = u; 
                 child++; 
                 
                 dfs(adj, v, vis, disc, low, parent, AP, time); 
                 
                 low[u]  = Math.min(low[u], low[v]); 
                 
                 if (parent[u] != -1 && low[v] >= disc[u]) {
                     AP[u] = true;}
                 
                 if (parent[u] == -1 && child > 1) {
                     AP[u] = true; }
                 
                 
                
             }
             else if (v != parent[u]) 
                 low[u]  = Math.min(low[u], disc[v]);
    }
  
    
   
             

    
}
    }
