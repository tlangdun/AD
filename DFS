import java.io.*;
import java.util.*;

class Main {
	public static void main(String[] args) {

		int t = In.readInt();
		for (int i = 0; i < t; i++) {
			testCase();
		}

	}

	public static void testCase() {

		int n = In.readInt();
		int m = In.readInt();

		LinkedList<Integer> adj[];
		adj = new LinkedList[n];

		boolean visited[] = new boolean[n];

		// add edges
		for (int i = 0; i < n; i++) {
			adj[i] = new LinkedList<>();
		}
		int a;
		int b;

		for (int i = 0; i < m; i++) {
			a = In.readInt();
			b = In.readInt();
			adj[a].add(b);
			adj[b].add(a);
		}

		DFS(0, visited, adj);
	}

	public static void DFS(int s, boolean visited[], LinkedList<Integer> adj[]) {

		visited[s] = true;
		Out.println(s + " ");

		Iterator<Integer> ite = adj[s].listIterator();
		while (ite.hasNext()) {
			int N = ite.next();
			if (!visited[N])
				DFS(N, visited, adj);
		}
	}
}
